- name: index operations in multiline chain
  type: no_change
  formatted: |
    aaaaaaa
        .aaaaaaaa[bbbbbbbb]
        .aaaaaaa
        .aaaaaaa[
            bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb + bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
        ]
        .aaaaaaa
        .aaaaaaa
        .aaaaaaa
- name: multiline root with chained items
  type: no_change
  formatted: |
    asdfasdf({
        let x;
    })
    .aaaa
    .aaaa
- name: field after multiline method call
  type: no_change
  formatted: |
    asdfasdf
        .ab
        .method_call(|| {
            let x;
        })
        .hi
- name: simple index after multiline method call
  type: no_change
  formatted: |
    asdfasdf.ab.method_call(|| {
        let x;
    })[0]
- name: try after multiline method call
  type: no_change
  formatted: |
    asdfasdf.ab.method_call(|| {
        let x;
    })?
- name: multiline index after multiline method call
  type: no_change
  formatted: |
    asdfasdf
        .ab
        .method_call(|| {
            let x;
        })[
            asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf
                + asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf
        ]
- name: prefer separate-lines chain over overflow if the number of lines is the same, and the method call can fit on one line
  type: breakpoint
  before: |
    rooty
        .asdf
        .asdf
        .asdfasdf(Thing { thing, thing })
  after: |
    rooty.asdf.asdf.asdfasdf(Thing {
        thing,
        thing,
    })
- name: prefer overflow over multi-line chain if it is fewer lines
  type: breakpoint
  before: |
    oneone.two.three.four.five(
        foo,
        foo,
    )
  after: |
    oneone
        .two
        .three
        .four
        .five(foo, foo)
- name: prefer separate-lines chain over overflow when same number of lines, even when method call is multi-line
  type: breakpoint
  before: |
    oneone.two.three(Foo {
        foooooey,
        gooooooey,
    })
  after: |
    oneone
        .two
        .three(Foo {
            foooooey,
            gooooooey,
        })
