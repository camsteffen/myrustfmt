- name: line comment after block opening and closing brace
  type: before_after
  in_block: true
  before: |
    {    // open
        let x;
    }    // close
  after: |
    { // open
        let x;
    } // close
- name: line comment after block opening brace without space
  type: no_change
  in_block: true
  formatted: |
    {// open
        let x;
    }// close
- name: trim all but one blank line leading and trailing line comments in block
  type: before_after
  in_block: true
  before: |
    {

        // leading


        let x;


        // trailing

    }
  after: |
    {
        // leading

        let x;

        // trailing
    }
- name: comment in an empty array
  type: before_after
  in_block: true
  before: |
    [

    // hi

    ]
  after: |
    [
        // hi
    ]
- name: leading and trailing comments in an array
  type: before_after
  in_block: true
  before: |
    [

    // leading

        element,

    // trailing

    ]
  after: |
    [
        // leading

        element,

        // trailing
    ]
- name: prefix a token with a single-line block
  type: before_after
  in_block: true
  before: |
    let  /*comment*/x;
  after: |
    let /*comment*/x;
- name: suffix a token with a single-line block comment
  type: before_after
  in_block: true
  before: |
    let/*comment*/  x;
  after: |
    let/*comment*/ x;
- name: prefix a token with a multi-line block
  type: before_after
  in_block: true
  before: |
    let  /*comment
          second line*/x;
  after: |
    let /*comment
          second line*/x;
- name: suffix a token with a multi-line block
  type: before_after
  in_block: true
  before: |
    let/*comment
          second line*/  x;
  after: |
    let/*comment
          second line*/ x;
- name: block comment padded with spaces where there would be no space
  type: before_after
  in_block: true
  before: |
    (  /* comment */  x );
  after: |
    ( /* comment */ x);
- name: line command after if block opening
  type: before_after
  in_block: true
  before: |
    if cond {  // super helpful comment
        booya();
    }
  after: |
    if cond { // super helpful comment
        booya();
    }
