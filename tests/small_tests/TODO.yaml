- name: temp
  type: no_change
  in_block: true
  formatted: |
      let Some(remaining) = width_limitwidthwidth_limit_limitwidth_limit
          .checked_sub(self.out.last_line_len() - line_start_pos)
      else {
          x;
      };

      // chains with two items should not enforce chain width
      self.with_width_limit_from_start(line_start_pos, width_limit, f);

      self.with_single_line_opt(self.constraints().requires_indent_middle(), || {
          let first_line = self.out.line();
          self.out.token_space(token)?;
          self.expr(expr)?;
          let force_newline = self.out.line() != first_line
              && self.out.with_last_line(|line| {
                  let after_indent = &line[self.out.constraints().indent.get() as usize..];
                  after_indent
                      .chars()
                      .any(|c| !matches!(c, '(' | ')' | ']' | '}' | '?' | '>'))
              });
          let newline_open_block = || {
              self.out.newline_within_indent()?;
              self.out.token("{")?;
              Ok(())
          };
          if force_newline {
              newline_open_block()?;
          } else {
              self.backtrack()
                  .next_single_line(|| self.out.space_token("{"))
                  .otherwise(newline_open_block)?;
          }
          Ok(self.out.line() == first_line)
      });
    
      // fix this cast wrapping
      b.extend(std::iter::repeat_n(' ', self.constraints.indent.get()
          as usize));
      
      // todo don't let closure arguments wrap
      fooo(bar, |
      arg,
      arg,
      | expr);

      // todo prefer breaking on the outer struct
      self.handle_whitespace_and_comments(WhitespaceMode::Vertical(
          NewlineKind::IfComments,
      ));
      
      // todo don't break this chain
      let newlines = token_str.bytes().filter(|&b| b == b'\n').count();
      rustc_lexer::tokenize(self.remaining()).next().unwrap();
      let initial_used_width = before.lines().map(|line| line.len() as u32).max().unwrap();
      
      // todo if after closure?
      self.skip_single_expr_blocks(body, |body| if arm_body_requires_block(body) {
          self.expr_add_block(body)
      } else if plain_block(body).is_some() {
          self.expr(body)
      } else {
          self.arm_body_add_block_if_first_line_is_longer(body)
      })?;
      
