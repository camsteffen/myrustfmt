use rustc_ast::ast::{Expr, ExprKind};

pub fn expr_kind_name(expr: &Expr) -> &'static str {
    match expr.kind {
        ExprKind::AddrOf(..) => "AddrOf",
        ExprKind::Array(..) => "Array",
        ExprKind::Assign(..) => "Assign",
        ExprKind::AssignOp(..) => "AssignOp",
        ExprKind::Await(..) => "Await",
        ExprKind::Become(_) => "Become",
        ExprKind::Binary(..) => "Binary",
        ExprKind::Block(..) => "Block",
        ExprKind::Break(..) => "Break",
        ExprKind::Call(..) => "Call",
        ExprKind::Cast(..) => "Cast",
        ExprKind::Closure(..) => "Closure",
        ExprKind::ConstBlock(..) => "ConstBlock",
        ExprKind::Continue(..) => "Continue",
        ExprKind::Dummy => "Dummy",
        ExprKind::Err(_) => "Err",
        ExprKind::Field(..) => "Field",
        ExprKind::ForLoop { .. } => "ForLoop",
        ExprKind::FormatArgs(_) => "FormatArgs",
        ExprKind::Gen(..) => "Gen",
        ExprKind::If(..) => "If",
        ExprKind::IncludedBytes(_) => "IncludedBytes",
        ExprKind::Index(..) => "Index",
        ExprKind::InlineAsm(..) => "InlineAsm",
        ExprKind::Let(..) => "Let",
        ExprKind::Lit(..) => "Lit",
        ExprKind::Loop(..) => "Loop",
        ExprKind::MacCall(..) => "MacCall",
        ExprKind::Match(..) => "Match",
        ExprKind::MethodCall(..) => "MethodCall",
        ExprKind::OffsetOf(..) => "OffsetOf",
        ExprKind::Paren(..) => "Paren",
        ExprKind::Path(..) => "Path",
        ExprKind::Range(..) => "Range",
        ExprKind::Repeat(..) => "Repeat",
        ExprKind::Ret(..) => "Ret",
        ExprKind::Struct(..) => "Struct",
        ExprKind::Try(..) => "Try",
        ExprKind::TryBlock(..) => "TryBlock",
        ExprKind::Tup(..) => "Tup",
        ExprKind::Type(..) => "Type",
        ExprKind::Unary(..) => "Unary",
        ExprKind::Underscore => "Underscore",
        ExprKind::UnsafeBinderCast(..) => "UnsafeBinderCast",
        ExprKind::Use(..) => "Use",
        ExprKind::While(..) => "While",
        ExprKind::Yeet(_) => "Yeet",
        ExprKind::Yield(_) => "Yield",
    }
}
